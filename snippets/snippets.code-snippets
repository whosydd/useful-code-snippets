{
  // export
  "module.exports": {
    "prefix": "mex",
    "body": "module.exports = {\n  $0\n}\n"
  },
  "export default": {
    "prefix": "exd",
    "body": "export default $0"
  },
  "export obj": {
    "prefix": "exo",
    "body": "export {\n\t$0\n}"
  },
  "export func": {
    "prefix": "enf",
    "body": "export const ${1:funcName} = (${2:params}) => {\n\t$0\n}"
  },
  "export default func": {
    "prefix": "edf",
    "body": "export default (${1:params}) => {\n\t$0\n}"
  },
  // import
  "require": {
    "prefix": "req",
    "body": "const $1 = require($0)"
  },
  "import": {
    "prefix": "imp",
    "body": "import $1 from $0"
  },
  "import fs": {
    "prefix": "ifs",
    "body": "import fs from 'fs'\n$0"
  },
  "require fs": {
    "prefix": "rfs",
    "body": "const fs = require('fs')\n$0"
  },
  "import path": {
    "prefix": "ipath",
    "body": "import path from 'path'\n$0"
  },
  "require path": {
    "prefix": "rpath",
    "body": "const path = require('path')\n$0"
  },
  "import lodash": {
    "prefix": "ilodash",
    "body": "import _ from 'lodash'\n$0"
  },
  "require lodash": {
    "prefix": "rlodash",
    "body": "const _ = require('lodash')\n$0"
  },
  "import axios": {
    "prefix": "iaxios",
    "body": "import axios from 'axios'\n$0"
  },
  "require axios": {
    "prefix": "raxios",
    "body": "const axios = require('axios')\n$0"
  },
  "require dotenv": {
    "prefix": "dotenv",
    "body": "require('dotenv').config()\n$0"
  },
  // function
  "arrow": {
    "prefix": "af",
    "body": "($1) => "
  },
  "arrow func": {
    "prefix": "afn",
    "body": "($1) => {\n\t$0\n}"
  },
  "const func": {
    "prefix": "cfn",
    "body": "const ${1:funcName} = ($2) => {\n\t$0\n}"
  },
  "return func": {
    "prefix": "rfn",
    "body": "return ($1) => {\n\t$0\n}"
  },
  // eslint
  "eslint-disable-line": {
    "prefix": "eslint-disable-line",
    "body": "/* eslint-disable-line */"
  },
  "eslint-disable-next-line": {
    "prefix": "eslint-disable-next-line",
    "body": "/* eslint-disable-next-line */"
  },
  "eslint-disable": {
    "prefix": "eslint-disable",
    "body": "/* eslint-disable */"
  },
  // array
  "forEach": {
    "prefix": ".forEach",
    "body": ".forEach((item) => $0)"
  },
  "map": {
    "prefix": ".map",
    "body": ".map((item) => $0)"
  },
  "filter": {
    "prefix": ".filter",
    "body": ".filter((item) => $0)"
  },
  "reduce": {
    "prefix": ".reduce",
    "body": ".reduce((item) => $0,$1)"
  },
  "for of": {
    "prefix": "fof",
    "body": "for (const ${1:itemName} of ${2:objectName}) {\n\t$0\n}"
  },
  "for in": {
    "prefix": "fin",
    "body": "for (const ${1:itemName} in ${2:objectName} {\n\t$0\n}"
  },
  // promise
  "return promise": {
    "prefix": "rprom",
    "body": "return new Promise((resolve, reject) => {\n\t$0\n})"
  },
  "then catch": {
    "prefix": ".thenc",
    "body": ".then((res) => $1).catch((err) => $2)\n$0"
  },
  // console
  "console.log": {
    "prefix": "cl",
    "body": "console.log('$1-->', $1)\n$0"
  },
  // other
  "setTimeOut": {
    "prefix": "sto",
    "body": "setTimeout(() => $0, ${1:timeout})"
  },
  "setInterval": {
    "prefix": "sti",
    "body": "setInterval(() => $0, ${1:interval})"
  }
}
